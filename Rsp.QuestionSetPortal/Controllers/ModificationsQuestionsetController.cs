using Microsoft.AspNetCore.Mvc;
using Rsp.QuestionSetPortal.Helpers;
using Rsp.QuestionSetPortal.Models;
using Rsp.QuestionSetPortal.Models.Modifications;
using Rsp.QuestionSetPortal.Services;
using Umbraco.Cms.Core;
using Umbraco.Cms.Web.Common.PublishedModels;

namespace Rsp.QuestionSetPortal.Controllers;

[ApiController]
[Route("/umbraco/api/[controller]/[action]")]
public class ModificationsQuestionsetController
(
    IModificationQuestionSetService questionSetService,
    IPublishedContentQuery contentQuery
) : ControllerBase
{
    [HttpGet]
    public QuestionSetModel GetQuestionSet(string? sectionId = null, string? questionSetId = null, string? version = null)
    {
        var result = new QuestionSetModel();

        if (!string.IsNullOrEmpty(sectionId))
        {
            var activeQuestionSet = questionSetService.GetQuestionsetByVersion(version);

            var section = activeQuestionSet?
                .Descendants<Section>()
                .FirstOrDefault
                (
                    section =>
                        section.SectionId?.Equals(sectionId, StringComparison.InvariantCultureIgnoreCase) == true
                );

            if (activeQuestionSet == null || section == null)
            {
                return result;
            }

            ContentHelpers.PopulateGeneralQuestionSetMetadata(result, activeQuestionSet);

            var sectionModel = ContentHelpers.PopulateSectionModel(section);

            sectionModel.Questions = ContentHelpers.TransformQuestions(section, result.Version);

            result.Sections.Add(sectionModel);
        }
        else
        {
            if (string.IsNullOrEmpty(questionSetId))
            {
                // no id passed so go ahead and get the active questionset
                var activeQuestionSet = questionSetService.GetQuestionsetByVersion(version);

                if (activeQuestionSet != null)
                {
                    questionSetId = activeQuestionSet.Key.ToString();

                    ContentHelpers.PopulateGeneralQuestionSetMetadata(result, activeQuestionSet);
                }
            }

            if (!string.IsNullOrEmpty(questionSetId))
            {
                var questionSet = contentQuery.Content(questionSetId) as ModificationsQuestionSet;

                ContentHelpers.PopulateGeneralQuestionSetMetadata(result, questionSet);

                var sections = questionSet?.Descendants<Section>();

                if (sections != null)
                {
                    foreach (var section in sections)
                    {
                        var sectionModel = ContentHelpers.PopulateSectionModel(section);

                        sectionModel.Questions = ContentHelpers.TransformQuestions(section, result.Version);

                        result.Sections.Add(sectionModel);
                    }
                }
            }
        }

        return result;
    }

    [HttpGet]
    public StartingQuestionsModel GetStartingQuestions(string? version = null)
    {
        var result = new StartingQuestionsModel();
        var activeQuestionSet = questionSetService.GetQuestionsetByVersion(version);

        if (activeQuestionSet != null)
        {
            var questionSetNode = contentQuery.Content(activeQuestionSet.Key);

            if (questionSetNode != null)
            {
                var areaOfChange = questionSetNode.FirstChild<AreaOfChangeQuestion>();

                if (areaOfChange != null)
                {
                    var answerOptions = areaOfChange.Children<AnswerOption>();

                    result.AreasOfChange = answerOptions.Select(option => new AreaOfChangeModel()
                    {
                        AutoGeneratedId = option.Key.ToString(),
                        Id = option.OptionId,
                        OptionName = option.OptionName,
                        SpecificAreasOfChange = option.Children<SubAnswerOption>().Select(suboption => new AnswerModel
                        {
                            AutoGeneratedId = suboption.Key.ToString(),
                            Id = suboption.OptionId,
                            OptionName = suboption.OptionName,
                            ShowApplicabilityQuestions = suboption.ShowApplicabilityQuestions
                        }).ToList()
                    }).ToList();
                }
            }
        }

        return result;
    }

    [HttpGet]
    public QuestionSetModel GetModificationsJourney(string specificChangeId, string? version = null)
    {
        var result = new QuestionSetModel();

        var activeQuestionSet = questionSetService.GetQuestionsetByVersion(version);
        if (activeQuestionSet == null)
        {
            return result;
        }

        ContentHelpers.PopulateGeneralQuestionSetMetadata(result, activeQuestionSet);
        var journeys = activeQuestionSet.Children<ModificationJourney>();
        var activeJourney = journeys?.FirstOrDefault(x => x.Condition?.Any(x => x.Key.ToString() == specificChangeId) == true);

        var children = activeJourney?.Children<Section>();

        if (children is null)
        {
            return result;
        }

        foreach (var section in children)
        {
            var sectionModel = new SectionModel
            {
                SectionName = section.SectionName,
                Id = section.SectionId,
                CategoryId = section.Category?.Name,
                AutoGeneratedId = section.Key.ToString(),
                GuidanceComponents = section.GuidanceContent != null ? ContentHelpers.TransformUiComponent(section.GuidanceContent) : [],
                Questions = ContentHelpers.TransformQuestions(section, version),
                StaticViewName = section.StaticViewName,
                IsMandatory = section.Mandatory,
                Sequence = section.Sequence,
            };

            result.Sections.Add(sectionModel);
        }

        return result;
    }

    [HttpGet]
    public QuestionSectionResponse? GetNextQuestionSection(string currentSectionId, string? version = null, string? parentQuestionId = null, string? parentAnswerOption = null)
    {
        if (string.IsNullOrEmpty(currentSectionId))
        {
            return null;
        }

        var questionset = questionSetService.GetQuestionsetByVersion(version);

        var currentSection = questionset?
           .Descendants<Section>()
           .FirstOrDefault
           (
               section =>
                   !string.IsNullOrEmpty(section.SectionId) &&
                    section.SectionId.Equals(currentSectionId, StringComparison.InvariantCultureIgnoreCase)
           );

        if (currentSection is null ||
            currentSection.Parent<ModificationJourney>()?.Children<Section>() is not IEnumerable<Section> allSections)
        {
            return null;
        }

        var currentSectionIndex = -1;
        if (parentQuestionId != null && parentAnswerOption != null)
        {
            var index = from section in allSections
                        where section.Key == currentSection.Key
                        let slot = section.ParentQuestion as QuestionSlot
                        where slot != null && slot.QuestionId == parentQuestionId
                        let answerOption = section.ParentAnswerOption as AnswerOption
                        where answerOption != null && answerOption.Name == parentAnswerOption
                        select section;

            currentSectionIndex = allSections.FindIndex(x => x.Key == currentSection.Key
            && x.ParentQuestion is QuestionSlot slot
            && slot.QuestionId == parentQuestionId
            && x.ParentAnswerOption is AnswerOption answerOption
            && answerOption.Name == parentAnswerOption);
        }
        else
        {
            currentSectionIndex = allSections.FindIndex(x => x.Key == currentSection.Key);
        }

        if (allSections.ElementAtOrDefault(currentSectionIndex + 1) != null)
        {
            var nextSection = allSections.ElementAtOrDefault(currentSectionIndex + 1);
            var nextSectionCategory = nextSection?.Category as Category;

            return new QuestionSectionResponse
            {
                SectionId = nextSection?.SectionId,
                SectionName = nextSection?.SectionName?.ToString(),
                QuestionCategoryId = nextSectionCategory?.CategoryId,
                StaticViewName = nextSection?.StaticViewName,
                IsMandatory = nextSection?.Mandatory ?? false,
                Sequence = nextSection?.Sequence ?? 0,
            };
        }

        return null;
    }

    [HttpGet]
    public QuestionSectionResponse? GetPreviousQuestionSection(string currentSectionId, string? version = null, string? parentQuestionId = null, string? parentAnswerOption = null)
    {
        if (string.IsNullOrEmpty(currentSectionId))
        {
            return null;
        }

        var questionset = questionSetService.GetQuestionsetByVersion(version);

        var currentSection = questionset?
           .Descendants<Section>()
           .FirstOrDefault(x =>
               !string.IsNullOrEmpty(x.SectionId) &&
                x.SectionId
               .Equals(currentSectionId, StringComparison.InvariantCultureIgnoreCase)
           );

        if (currentSection != null)
        {
            var allSections = currentSection.Parent<ModificationJourney>()?.Children<Section>();

            if (allSections != null)
            {
                var currentSectionIndex = -1;
                if (parentQuestionId != null && parentAnswerOption != null)
                {
                    var index = from section in allSections
                                where section.Key == currentSection.Key
                                let slot = section.ParentQuestion as QuestionSlot
                                where slot != null && slot.QuestionId == parentQuestionId
                                let answerOption = section.ParentAnswerOption as AnswerOption
                                where answerOption != null && answerOption.Name == parentAnswerOption
                                select section;

                    currentSectionIndex = allSections.FindIndex(x => x.Key == currentSection.Key
                    && x.ParentQuestion is QuestionSlot slot
                    && slot.QuestionId == parentQuestionId
                    && x.ParentAnswerOption is AnswerOption answerOption
                    && answerOption.Name == parentAnswerOption);
                }
                else
                {
                    currentSectionIndex = allSections.FindIndex(x => x.Key == currentSection.Key);
                }

                if (allSections.ElementAtOrDefault(currentSectionIndex - 1) != null)
                {
                    var prevSection = allSections.ElementAtOrDefault(currentSectionIndex - 1);
                    var prevSectionCategory = prevSection?.Category as Category;

                    return new QuestionSectionResponse
                    {
                        SectionId = prevSection?.SectionId,
                        SectionName = prevSection?.SectionName?.ToString(),
                        QuestionCategoryId = prevSectionCategory?.CategoryId,
                        StaticViewName = prevSection?.StaticViewName,
                        IsMandatory = prevSection?.Mandatory ?? false,
                        Sequence = prevSection?.Sequence ?? 0,
                    };
                }
            }
        }

        return null;
    }
}