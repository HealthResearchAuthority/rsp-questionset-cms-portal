using Mapster;
using Rsp.QuestionSetPortal.Models;
using Rsp.QuestionSetPortal.Models.UIContent;
using Umbraco.Cms.Core.Models.Blocks;
using Umbraco.Cms.Core.Models.PublishedContent;
using Umbraco.Cms.Web.Common.PublishedModels;

namespace Rsp.QuestionSetPortal.Helpers;

public static class ContentHelpers
{
    public static IList<QuestionModel> TransformQuestions(Section section, string version)
    {
        var result = new List<QuestionModel>();

        var sections = section.Children<QuestionSlot>();

        if (sections != null)
        {
            foreach (var questionSlot in sections)
            {
                var associatedQuestion = questionSlot.QuestionContent as Question;

                if (associatedQuestion == null)
                {
                    continue;
                }

                var questionModel = associatedQuestion.Adapt<QuestionModel>();

                questionModel.CategoryId = section.Category?.Name;
                questionModel.Version = version;
                questionModel.ValidationRules = TransformValidationRules(questionSlot);
                questionModel.Id = questionSlot.QuestionId;
                questionModel.AutoGeneratedId = questionSlot.Key.ToString();
                questionModel.Conformance = questionSlot.Conformance;
                questionModel.ShowOriginalAnswer = questionSlot.ShowOriginalAnswer;
                questionModel.Sequence = questionSlot.Sequence;
                questionModel.SectionSequence = section.Sequence;
                questionModel.ShowAnswerOn = questionSlot.ShowAnswerOn;

                if (associatedQuestion != null)
                {
                    questionModel.Answers = TransformAnswers(associatedQuestion);
                    questionModel.Name = associatedQuestion.QuestionName;
                    questionModel.ShortName = associatedQuestion.ShortQuestionName;
                    questionModel.GuidanceComponents = associatedQuestion.GuidanceContent != null ? TransformUiComponent(associatedQuestion.GuidanceContent) : [];
                }

                result.Add(questionModel);
            }
        }

        return result;
    }

    public static IList<ContentComponent> TransformUiComponent(BlockListModel content)
    {
        var result = new List<ContentComponent>();
        foreach (var block in content)
        {
            switch (block.Content)
            {
                case AccordionComponent component:

                    if (component.Items != null)
                    {
                        var items = component.Items.Select(x => new AccordionComponentItemModel
                        {
                            Title = x.Content.Value<string>("title"),
                            Value = x.Content.Value<string>("value")
                        })?.ToList();

                        result.Add(new AccordionComponentModel { ContentType = component.ContentType.Alias, Items = items != null ? items : [] });
                    }

                    break;

                case DetailsComponent component:

                    result.Add(new DetailsComponentModel
                    {
                        ContentType = component.ContentType.Alias,
                        Title = component.Title,
                        Value = component.Value,
                    });

                    break;

                case BodyTextComponent component:

                    result.Add(new BodyTextComponentModel
                    {
                        ContentType = component.ContentType.Alias,
                        Value = component.Value,
                    });

                    break;

                case TabsComponent component:

                    if (component.Items != null)
                    {
                        var items = component.Items.Select(x => new TabComponentItemModel
                        {
                            Title = x.Content.Value<string>("title"),
                            Value = x.Content.Value<string>("value")
                        })?.ToList();
                        result.Add(new TabsComponentModel { ContentType = component.ContentType.Alias, Items = items != null ? items : [] });
                    }

                    break;
            }
        }
        return result;
    }

    public static IList<AnswerModel> TransformAnswers(Question question)
    {
        var result = new List<AnswerModel>();

        var answers = question.PossibleAnswers;
        if (answers != null)
        {
            foreach (var answer in answers.OrderBy(a => a.SortOrder))
            {
                var typedAnswer = answer as AnswerOption;
                var answerModel = new AnswerModel()
                {
                    AutoGeneratedId = typedAnswer?.Key.ToString(),
                    Id = typedAnswer?.OptionId,
                    OptionName = typedAnswer?.OptionName,
                };

                result.Add(answerModel);
            }
        }

        return result;
    }

    public static IList<RuleModel> TransformValidationRules(QuestionSlot question)
    {
        var result = new List<RuleModel>();

        var rules = question.ValidationRules;
        if (rules != null)
        {
            foreach (var rule in rules)
            {
                var strongRule = rule.Content as ValidationRule;

                if (strongRule != null)
                {
                    var ruleModel = strongRule.Adapt<RuleModel>();

                    ruleModel.QuestionId = question.QuestionId;

                    if (strongRule.ParentQuestion is QuestionSlot parentQuestionSlot)
                    {
                        var parentQuestionContent = parentQuestionSlot.QuestionContent as Question;
                        var parentQuestionName = parentQuestionContent?.QuestionName;

                        ruleModel.ParentQuestion = new QuestionModel();
                        ruleModel.ParentQuestion.Id = parentQuestionSlot.QuestionId;
                        ruleModel.ParentQuestion.Name = parentQuestionName;
                    }

                    ruleModel.Conditions = new List<ConditionModel>();

                    foreach (var condition in strongRule.Conditions)
                    {
                        var strongCondition = condition.Content as ValidationCondition;

                        var conditionModel = strongCondition.Adapt<ConditionModel>();

                        if (strongCondition?.ParentOptions != null)
                        {
                            conditionModel.ParentOptions = strongCondition
                                .ParentOptions
                                .Select(x =>
                                    new AnswerModel
                                    {
                                        Id = x.Value<string>("optionId"),
                                        AutoGeneratedId = x.Key.ToString(),
                                        OptionName = x.Value<string>("optionName")
                                    })
                                .ToList();
                        }

                        ruleModel.Conditions.Add(conditionModel);
                    }
                    result.Add(ruleModel);
                }
            }
        }

        return result;
    }

    public static void PopulateGeneralQuestionSetMetadata(QuestionSetModel model, IPublishedContent questionset)
    {
        model.Id = questionset.Key.ToString();
        model.Version = questionset.Value<int>("versionNumber").ToString();
        model.Status = questionset.Value<string>("status");
        model.ActiveFrom = questionset.Value<DateTime>("activeFrom") != DateTime.MinValue ? questionset?.Value<DateTime>("activeFrom") : null;
        model.ActiveTo = questionset?.Value<DateTime>("activeTo") != DateTime.MinValue ? questionset?.Value<DateTime>("activeTo") : null;
    }

    public static SectionModel PopulateSectionModel(Section section)
    {
        var category = section.Category as Category;
        var sectionModel = new SectionModel
        {
            SectionName = section.SectionName,
            Id = section.SectionId,
            AutoGeneratedId = section.Key.ToString(),
            GuidanceComponents = section.GuidanceContent != null ? TransformUiComponent(section.GuidanceContent) : [],
            CategoryId = category?.CategoryId,
            StaticViewName = section.StaticViewName,
            IsMandatory = section.Mandatory,
            Sequence = section.Sequence
        };
        return sectionModel;
    }
}